/* libmicrohttpd.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "MHD_", lower_case_cprefix = "mhd_")]
namespace MHD {
	[Compact]
	[CCode (cheader_filename = "microhttpd.h")]
	public class fd_set {
	}
	[Compact]
	[CCode (cheader_filename = "microhttpd.h")]
	public class ConnectionInfo {
	}
	[Compact]
	[CCode (cheader_filename = "microhttpd.h")]
	public class DaemonInfo {
	}
	[Compact]
	[CCode (cname="struct MHD_Response",cheader_filename = "microhttpd.h", free_function="MHD_destroy_response")]
	public class Response {
		[CCode (cname = "MHD_get_response_header", cheader_filename = "microhttpd.h")]
		public unowned string get_response_header (string key);
		[CCode (cname = "MHD_get_response_headers", cheader_filename = "microhttpd.h")]
		public int get_response_headers (MHD.KeyValueIterator iterator, void* iterator_cls);
		[CCode (cname = "MHD_add_response_header", cheader_filename = "microhttpd.h")]
		public int add_response_header (string header, string content);
		[CCode (cname = "MHD_del_response_header", cheader_filename = "microhttpd.h")]
		public int del_response_header (string header, string content);
		[CCode (cname = "MHD_add_response_footer", cheader_filename = "microhttpd.h")]
		public int add_response_footer (string footer, string content);
	}

	[Compact]
	[CCode (cname="struct MHD_Connection",cheader_filename = "microhttpd.h", free_function="MHD_destroy_connection")]
	public class Connection {
		[CCode (cname = "MHD_queue_response", cheader_filename = "microhttpd.h")]
		public int queue_response (uint status_code, MHD.Response response);
		[CCode (cname = "MHD_create_post_processor", cheader_filename = "microhttpd.h")]
		public PostProcessor? create_post_processor (size_t buffer_size, MHD.PostDataIterator iter, void* cls);
		[CCode (cname = "MHD_get_connection_info", cheader_filename = "microhttpd.h")]
		public unowned MHD.ConnectionInfo get_connection_info (MHD.ConnectionInfoType infoType);
		[CCode (cname = "MHD_get_connection_values", cheader_filename = "microhttpd.h")]
		public int get_connection_values (MHD.ValueKind kind, MHD.KeyValueIterator iterator, void* iterator_cls);
		[CCode (cname = "MHD_lookup_connection_value", cheader_filename = "microhttpd.h")]
		public unowned string lookup_connection_value (MHD.ValueKind kind, string key);
		[CCode (cname = "MHD_set_connection_value", cheader_filename = "microhttpd.h")]
		public int set_connection_value (MHD.ValueKind kind, string key, string value);
		[CCode (cname = "MHD_digest_auth_check", cheader_filename = "microhttpd.h")]
		public int digest_auth_check (string realm, string username, string password, uint nonce_timeout);
		[CCode (cname = "MHD_queue_auth_fail_response", cheader_filename = "microhttpd.h")]
		public int queue_auth_fail_response (string realm, string opaque, MHD.Response? response, int signal_stale);
	}

	[Compact]
	[CCode (cname="struct MHD_PostProcessor",cheader_filename = "microhttpd.h", free_function="MHD_destroy_post_processor")]
	public class PostProcessor {
		[CCode (cname = "MHD_post_process", cheader_filename = "microhttpd.h")]
		public int post_process (string post_data, size_t post_data_len);
	}

	[Compact]
	[CCode (cname="struct MHD_Daemon",cheader_filename = "microhttpd.h", free_function="MHD_stop_daemon")]
	public class Daemon {
		[CCode (cname = "MHD_get_daemon_info", cheader_filename = "microhttpd.h")]
		public unowned MHD.DaemonInfo get_daemon_info (MHD.DaemonInfoType infoType);
		[CCode (cname = "MHD_get_fdset", cheader_filename = "microhttpd.h")]
		public int get_fdset (MHD.fd_set read_fd_set, MHD.fd_set write_fd_set, MHD.fd_set except_fd_set, int max_fd);
		[CCode (cname = "MHD_get_timeout", cheader_filename = "microhttpd.h")]
		public int get_timeout (uint timeout);
		[CCode (cname = "MHD_run", cheader_filename = "microhttpd.h")]
		public int run ();
		[CCode (cname = "MHD_stop_daemon", cheader_filename = "microhttpd.h")]
		public void stop_daemon ();
	}

	[CCode (cname= "enum MHD_ResponseMemoryMode", cprefix = "MHD_RESPMEM_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum ResponseMemoryMode {
		PERSISTENT,
		MUST_COPY,
		MUST_FREE
	}
	[CCode (cname= "enum MHD_ConnectionInfoType", cprefix = "MHD_CONNECTION_INFO_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum ConnectionInfoType {
		CIPHER_ALGO,
		PROTOCOL,
		CLIENT_ADDRESS
	}
	[CCode (cname= "enum MHD_DaemonInfoType", cprefix = "MHD_DAEMON_INFO_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum DaemonInfoType {
		KEY_SIZE,
		MAC_KEY_SIZE,
		LISTEN_FD
	}
	[CCode (cname="enum MHD_FLAG", cprefix = "MHD_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum FLAG {
		NO_FLAG,
		USE_DEBUG,
		USE_SSL,
		USE_THREAD_PER_CONNECTION,
		USE_SELECT_INTERNALLY,
		USE_IPv6,
		USE_PEDANTIC_CHECKS,
		USE_POLL
	}
	[CCode (cname="enum MHD_OPTION", cprefix = "MHD_OPTION_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum OPTION {
		END,
		CONNECTION_MEMORY_LIMIT,
		CONNECTION_LIMIT,
		CONNECTION_TIMEOUT,
		NOTIFY_COMPLETED,
		PER_IP_CONNECTION_LIMIT,
		SOCK_ADDR,
		URI_LOG_CALLBACK,
		HTTPS_MEM_KEY,
		HTTPS_MEM_CERT,
		CRED_TYPE,
		PROTOCOL_VERSION,
		CIPHER_ALGORITHM,
		EXTERNAL_LOGGER,
		THREAD_POOL_SIZE,
		ARRAY
	}
	[CCode (cname= "enum MHD_RequestTerminationCode", cprefix = "MHD_REQUEST_TERMINATED_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum RequestTerminationCode {
		COMPLETED_OK,
		WITH_ERROR,
		TIMEOUT_REACHED,
		DAEMON_SHUTDOWN
	}
	[CCode (cname= "enum MHD_ValueKind", cprefix = "MHD_", has_type_id = false, cheader_filename = "microhttpd.h")]
	public enum ValueKind {
		RESPONSE_HEADER_KIND ,
		HEADER_KIND ,
		COOKIE_KIND ,
		POSTDATA_KIND ,
		GET_ARGUMENT_KIND ,
		FOOTER_KIND 
	}
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate int AcceptPolicyCallback (void* cls, void* addr, uint32 addrlen);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate int AccessHandlerCallback (void* cls, MHD.Connection connection, string url, string method, string version, string? upload_data, size_t upload_data_size, void** con_cls);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate ssize_t ContentReaderCallback (void* cls, uint64 pos, string buf, size_t max);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate void ContentReaderFreeCallback (void* cls);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate int KeyValueIterator (void* cls, MHD.ValueKind kind, string key, string value);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate void PanicCallback (void* cls, string file, uint line, string reason);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate int PostDataIterator (void* cls, MHD.ValueKind kind, string key, string filename, string content_type, string transfer_encoding, string data, uint64 off, size_t size);
	[CCode (cheader_filename = "microhttpd.h", has_target = false)]
	public delegate void RequestCompletedCallback (void* cls, MHD.Connection connection, void** con_cls, MHD.RequestTerminationCode toe);
	[CCode (cheader_filename = "microhttpd.h")]
	public const int CONTENT_READER_END_WITH_ERROR;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_ACCEPTED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_BAD_GATEWAY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_BAD_REQUEST;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_BANDWIDTH_LIMIT_EXCEEDED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_CONFLICT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_CONTINUE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_CREATED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_EXPECTATION_FAILED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_FAILED_DEPENDENCY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_FORBIDDEN;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_FOUND;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_GATEWAY_TIMEOUT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_GONE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ACCEPT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ACCEPT_CHARSET;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ACCEPT_ENCODING;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ACCEPT_LANGUAGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ACCEPT_RANGES;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_AGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ALLOW;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_AUTHORIZATION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CACHE_CONTROL;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONNECTION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_ENCODING;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_LANGUAGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_LENGTH;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_LOCATION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_MD5;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_RANGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_CONTENT_TYPE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_COOKIE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_DATE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_ETAG;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_EXPECT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_EXPIRES;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_FROM;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_HOST;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_IF_MATCH;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_IF_MODIFIED_SINCE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_IF_NONE_MATCH;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_IF_RANGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_IF_UNMODIFIED_SINCE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_LAST_MODIFIED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_LOCATION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_MAX_FORWARDS;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_PRAGMA;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_PROXY_AUTHENTICATE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_PROXY_AUTHORIZATION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_RANGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_REFERER;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_RETRY_AFTER;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_SERVER;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_SET_COOKIE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_SET_COOKIE2;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_TE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_TRAILER;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_TRANSFER_ENCODING;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_UPGRADE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_USER_AGENT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_VARY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_VIA;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_WARNING;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_HEADER_WWW_AUTHENTICATE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_HTTP_VERSION_NOT_SUPPORTED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_INSUFFICIENT_STORAGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_INTERNAL_SERVER_ERROR;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_LENGTH_REQUIRED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_LOCKED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_CONNECT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_DELETE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_GET;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_HEAD;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_METHOD_NOT_ACCEPTABLE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_METHOD_NOT_ALLOWED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_OPTIONS;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_POST;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_PUT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_METHOD_TRACE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_MOVED_PERMANENTLY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_MULTIPLE_CHOICES;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_MULTI_STATUS;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NON_AUTHORITATIVE_INFORMATION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NOT_EXTENDED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NOT_FOUND;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NOT_IMPLEMENTED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NOT_MODIFIED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_NO_CONTENT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_OK;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_PARTIAL_CONTENT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_PAYMENT_REQUIRED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_POST_ENCODING_FORM_URLENCODED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_POST_ENCODING_MULTIPART_FORMDATA;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_PRECONDITION_FAILED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_PROCESSING;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_PROXY_AUTHENTICATION_REQUIRED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_REQUESTED_RANGE_NOT_SATISFIABLE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_REQUEST_ENTITY_TOO_LARGE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_REQUEST_TIMEOUT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_REQUEST_URI_TOO_LONG;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_RESET_CONTENT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_RETRY_WITH;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_SEE_OTHER;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_SERVICE_UNAVAILABLE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_SWITCHING_PROTOCOLS;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_SWITCH_PROXY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_TEMPORARY_REDIRECT;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_UNAUTHORIZED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_UNORDERED_COLLECTION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_UNPROCESSABLE_ENTITY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_UNSUPPORTED_MEDIA_TYPE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_UPGRADE_REQUIRED;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_USE_PROXY;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int HTTP_VARIANT_ALSO_NEGOTIATES;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_VERSION_1_0;
	[CCode (cheader_filename = "microhttpd.h")]
	public const string HTTP_VERSION_1_1;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int INVALID_NONCE;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int NO;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int VERSION;
	[CCode (cheader_filename = "microhttpd.h")]
	public const int YES;

	[CCode (cname = "MHD_create_response_from_callback", cheader_filename = "microhttpd.h")]
	public static MHD.Response? create_response_from_callback (uint64 size, size_t block_size, MHD.ContentReaderCallback crc, void* crc_cls, MHD.ContentReaderFreeCallback crfc);
	//Deprecated
	[CCode (cname = "MHD_create_response_from_data", cheader_filename = "microhttpd.h")]
	public static MHD.Response? create_response_from_data (size_t size, void* data, int must_free, int must_copy);
	[CCode (cname = "MHD_create_response_from_buffer", cheader_filename = "microhttpd.h")]
	public static MHD.Response? create_response_from_buffer (size_t size, void* data, MHD.ResponseMemoryMode mode);
	//Deprecated
	[CCode (cname = "MHD_create_response_from_fd", cheader_filename = "microhttpd.h")]
	public static MHD.Response? create_response_from_fd (size_t size, int fd);
	[CCode (cname = "MHD_create_response_from_fd_at_offset", cheader_filename = "microhttpd.h")]
	public static MHD.Response? create_response_from_fd_at_offset (size_t size, int fd, size_t offset);
	[CCode (cname = "MHD_get_version", cheader_filename = "microhttpd.h")]
	public static unowned string get_version ();
	[CCode (cname = "MHD_set_panic_func", cheader_filename = "microhttpd.h")]
	public static void set_panic_func (MHD.PanicCallback cb, void* cls);
	[CCode (cname = "MHD_start_daemon", cheader_filename = "microhttpd.h")]
	public static unowned MHD.Daemon? start_daemon (uint flags, uint16 port, MHD.AcceptPolicyCallback? apc, void* apc_cls, MHD.AccessHandlerCallback? dh, void* dh_cls, ...);
	[CCode (cname = "MHD_start_daemon_va", cheader_filename = "microhttpd.h")]
	public static unowned MHD.Daemon? MHD_start_daemon_va (uint options, uint16 port, MHD.AcceptPolicyCallback? apc, void* apc_cls, MHD.AccessHandlerCallback? dh, void* dh_cls, void* ap);
}
